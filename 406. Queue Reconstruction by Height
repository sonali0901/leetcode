class Solution {
    class Node{
        int value;
        int index;
        
        public Node ( int value, int index){
            this.value = value;
            this.index = index;
        }
        
        
    }
    
    class NodeCom implements Comparator<Node> {
        
        public int compare(Node n1, Node n2) {
            if(n2.value>n1.value)
                return 1;
            else if(n2.value < n1.value)
                return -1;
            else {
                if(n2.index<n1.index)
                    return 1;
                else // will not reach equality now, invalid iinput it will be
                    return -1;
            }
        }
    }
    public int[][] reconstructQueue(int[][] people) {
        
        if(people.length == 0 || people.length == 1)
        return people;
        
        PriorityQueue<Node> pq = new PriorityQueue<>(new NodeCom());
        for(int i=0;i<people.length;i++)
        {
            Node temp = new Node(people[i][0], people[i][1]);
            pq.add(temp);
        }
        int[][] ans = new int[people.length][people[0].length];
        ArrayList<Node> sequence = new ArrayList<>(people.length);
        while(!pq.isEmpty()){
            //System.out.println(pq.peek().value);
            Node temp = pq.remove();
            sequence.add(temp.index, temp);
        }
        
        for(int i = 0;i<people.length;i++) {
            Node temp = sequence.get(i);
            ans[i][0] = temp.value;
            ans[i][1] = temp.index;
        }
        return ans;
    }
}
