/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null)
            return head;
       
        Node ans = new Node(head.val);
        Node head2 = ans;
        Node temp = head.next;
        while(temp!=null){
            ans.next = new Node(temp.val);
            temp = temp.next;
            ans = ans.next;
        }
        
        temp = head;
        ans = head2;
        while(temp!=null){
            if(temp.random == null){
                temp = temp.next;
                ans = ans.next;
                continue;
            }
            //System.out.println(temp.val+ " "+temp.random.val);
            int dis = distance(head, temp.random);
            //System.out.println(dis);
            Node temp2 = head2;
            while(dis>0){
                temp2 = temp2.next;
                dis--;
            }
            ans.random = temp2;
            temp = temp.next;
            ans = ans.next;
        }
        return head2;
        
    }
    
    public int distance(Node head, Node dest){
        int dis = 0;
        Node temp = head;
        while(temp!=dest){
            temp = temp.next;
            dis++;
        }
        return dis;
    }
}
