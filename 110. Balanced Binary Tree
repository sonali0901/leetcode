/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    // top to bottom T(n) = 2T(n/2) + O(n) ==> O(NlogN)
    /*public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        int leftHeight = getHeight(root.left); // O(N)
        int rightHeight = getHeight(root.right);
                                                      //(T/2)
        return Math.abs(leftHeight-rightHeight)<=1 && isBalanced(root.left) && isBalanced(root.right);
        
        
    }
    
    int getHeight(TreeNode root) {
        if(root == null)
            return 0;
        return Math.max(getHeight(root.left), getHeight(root.right)) +1;
    }*/
    
    // bottom to top O(N)
    public boolean isBalanced(TreeNode root) {
        return !(getHeight(root) == -1);
    }
    
    public int getHeight(TreeNode root){
        if(root == null)
            return 0;
        int leftHeight = getHeight(root.left);
        if(leftHeight == -1)
            return -1; //left subtree is not balanced
        int rightHeight = getHeight(root.right);
        if(rightHeight == -1)
            return -1; //right subtree is not  balanced
        if(Math.abs(leftHeight-rightHeight)>1)
            return -1;
        return Math.max(leftHeight, rightHeight)+1;
    }
}
