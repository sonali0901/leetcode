class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0)
        return 0;
        int[][] temp = new int[grid.length][grid[0].length];
    return recurse(0,0, grid.length-1, grid[0].length-1, grid, temp);
        
    }
    public int recurse(int startrow, int startcol, int m, int n, int[][] grid, int[][] temp) {
        if(startrow == m && startcol == n)
            return grid[startrow][startcol];
        if(startrow>m || startcol>n)
            return Integer.MAX_VALUE;
        if(temp[startrow][startcol]!=0)
            return temp[startrow][startcol];
        int ans =  grid[startrow][startcol] + Math.min(recurse(startrow+1, startcol, m,n,grid, temp), recurse(startrow, startcol+1, m, n, grid, temp));
        temp[startrow][startcol] = ans;
        return ans;
        
}

}

