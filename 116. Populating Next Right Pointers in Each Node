/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    // iterative but space is )(n)
    /*public Node connect(Node root) {
        if(root == null)
            return root;
        LinkedList<Node> queue = new LinkedList<>();
        queue.add(root);
        queue.add(null);
        Node prev = null;
        while(!queue.isEmpty()){
            Node temp = queue.remove();
            if(temp == null && queue.isEmpty())
                break;
            if(prev != null)
                prev.next = temp;
            prev = temp;
            if(temp == null){
                queue.add(temp);
                continue;
            }
            if(temp.left!=null)
            queue.add(temp.left);
            if(temp.right!=null)
            queue.add(temp.right);
           
            
        }
        if(prev!=null)
            prev.next = null;
        return root;
        
    }*/
    
    public Node connect(Node root) {
        builder(root, null);
        return root;
    }
    
    public void builder(Node left, Node right){
        if(left == null)
            return;
        left.next = right;
        builder(left.left, left.right);
        builder(left.right, right==null?right:right.left);
    }
}
